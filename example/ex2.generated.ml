module type X__1 = sig type t val fst : (t -> (t -> t)) val snd : (t -> (t -> t)) end module type X__2 = sig type t val fst : (t -> (t -> t)) code val snd : (t -> (t -> t)) code end module type X__4 = sig type t val fst : (t -> (t -> t)) code val snd : (t -> (t -> t)) code end module type S = X__1
let f (type a)  = (fun (m: (module X__4 with type t = a)) -> (module struct module X__3 = (val m) type t = X__3.t let fst   = .<(fun x -> (fun y -> ((.~(X__3.fst) x) y)))>. let snd   = .<let fst   = (fun x -> (fun y -> ((.~(X__3.fst) x) y))) in (fun x -> (fun y -> ((.~(X__3.snd) x) y)))>. end : X__2 with type t = a));;
